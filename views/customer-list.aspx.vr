Using System
Using System.Data
Using System.Configuration
Using System.Collections
Using System.Web
Using System.Web.Security
Using System.Web.UI
Using System.Web.UI.WebControls
Using System.Web.UI.WebControls.WebParts
Using System.Web.UI.HtmlControls
Using System.Diagnostics

BegClass views_customer_list Partial(*Yes) Access(*Public) Extends(System.Web.UI.Page)

    DclDB DGDB                                              

    DclFld CustNameList Type(CustomerByNameList) 
    DclConst ROWS_TO_DISPLAY Value(12) 

    DclFld StateHelper Type(AppStateHelpers) New(*This.Context) 

    DclFld sw Type(StopWatch) New()

    BegSr Page_Load Access(*Private) Event(*This.Load)
        DclSrParm sender Type(*Object)
        DclSrParm e Type(System.EventArgs)

        DclFld dt Type(DataTable) 
        DclFld CustomerName Type(*String) 
        DclFld CustomerNumber Type(*Integer4) 

        sw.Start()

        DGDB.DBName = StateHelper.GetApplicationValue('dbname').ToString()
        //DGDB.User = StateHelper.GetSessionValueAsString('user')
        //DGDB.Password = StateHelper.GetSessionValueAsString('password')

        *This.Title = 'Customer List'

        Connect DGDB 
        CustNameList = *New CustomerByNameList(DGDB, ROWS_TO_DISPLAY) 

        If (NOT Page.IsPostBack)
            If  ArePositionToValuesProvided()
                CustomerName = StateHelper.GetSessionValueAsString('first-customer-name')
                CustomerNumber = StateHelper.GetSessionValueAsInt32('first-customer-number')

                dt = PositionListTo(CustomerName, CustomerNumber) 
                BindGridView(dt) 
            Else 
                dt = CustNamelist.ReadPage()            
                BindGridView(dt) 
            EndIf 
        Else
        EndIf
    EndSr

    BegFunc ArePositionToValuesProvided Type(*Boolean) 
        LeaveSr Session['first-customer-name'] <> *Nothing AND +
                Session['first-customer-number'] <> *Nothing
    EndFunc

    BegFunc Mod Type(*Integer4)  Access(*Public)
        // Return the remainder of division.
        DclSrParm Dividend *Integer4 
        DclSrParm Divisor  *Integer4 

        DclFld Remainder *Integer4 

        System.Math.DivRem( Dividend, Divisor, *ByRef Remainder ) 

        Leavesr Value( Remainder )         
    EndFunc

    BegSr BindGridView 
        DclSrParm dt Type(DataTable) 

        gridviewCust.DataSource = dt
        gridviewCust.DataBind()

        listviewCustomers.DataSource = dt
        listviewCustomers.DataBind()

        ViewState['last-customer-name'] = CustNameList.LastCMName.Trim()
        ViewState['last-customer-number'] = CustNameList.LastCMCustNo

        Session['first-customer-name'] = CustNameList.FirstCMName.Trim()
        Session['first-customer-number'] = CustNameList.FirstCMCustNo

        buttonNext.Enabled = CustNameList.MoreRows
        If buttonNext.Enabled 
            labelTableFooter.Text = 'More records to show'
            labelTableFooterListView.Text = 'More records to show'
        Else
            labelTableFooter.Text = 'No more records to show'
            labelTableFooterListView.Text = 'No more records to show'
        EndIf 
    EndSr 

    BegSr Page_Unload Access(*Private) Event(*This.Unload)
        DclSrParm sender Type(*Object)
        DclSrParm e Type(System.EventArgs)

        Disconnect DGDB 
        //
        // Called when the page is unloaded.
        //
    EndSr

    BegSr Page_Prerender Access(*Private) Event(*This.PreRender)
        DclSrParm sender Type(*Object)
        DclSrParm e Type(System.EventArgs)

        DclFld aveMs Type(*Integer4) 

        sw.Stop()

        aveMs = CalculateAverageMs(sw.ElapsedMilliseconds) 

        labelResponseTimes.Text = String.Format("This page: {0:#,##0}ms&nbsp;&nbsp;&nbsp;Average: {1:#,##0}ms", sw.ElapsedMilliseconds, aveMs)
    EndSr

    BegFunc CalculateAverageMs Type(*Integer4) 
        DclSrParm ms Type(*Integer8) 

        DclFld accumMs Type(*Integer4) 
        DclFld aveMs Type(*Integer4) 
        DclFld timesCalled Type(*Integer4) 

        timesCalled = (Session["timescalled"] = *Nothing) ? 1 : Convert.ToInt32(Session["timescalled"]) + 1
        Session["timescalled"] = timesCalled
        If timesCalled > 1
            accumMs = (Session["accumms"] = *Nothing) ? Convert.ToInt32(ms) : Convert.ToInt32(Session["accumms"]) + Convert.ToInt32(ms) 
            aveMs = accumMs / (timesCalled - 1)
            Session["accumms"] = accumMs
        EndIf 

        LeaveSr aveMs
    EndFunc         

    BegSr gridviewCust_SelectedIndexChanged Access(*Private) Event(*This.gridviewCust.SelectedIndexChanged)
        DclSrParm sender Type(*Object)
        DclSrParm e Type(System.EventArgs)
        
        DclFld SelectedRow Type(*Integer4) 

        SelectedRow = gridviewCust.SelectedIndex

        DclFld CustomerNumber Type(*Integer4) 
        DclFld CustomerName Type(*String) 

        CustomerNumber = Convert.ToInt32(gridviewCust.DataKeys[SelectedRow]['customer_cmcustno'])
        CustomerName = gridviewCust.DataKeys[SelectedRow]['customer_cmname'].ToString()
    EndSr

    BegSr buttonNext_Click Access(*Private) Event(*This.buttonNext.Click)
        DclSrParm sender Type(*Object)
        DclSrParm e Type(System.EventArgs)

        DclFld dt Type(DataTable) 

        CustNameList.LastCMName = ViewState['last-customer-name'].ToString()
        CustNameList.LastCMCustNo = ViewState['last-customer-number'].ToString()
 
        dt = CustNamelist.ReadNextPage()

        BindGridView(dt) 		
    EndSr

    BegSr buttonPositionTo_Click Access(*Private) Event(*This.buttonPositionTo.Click)
        DclSrParm sender Type(*Object)
        DclSrParm e Type(System.EventArgs)

        DclFld dt Type(DataTable) 

        If textboxPositionTo.Text.Trim() <> String.Empty
            dt = PositionListTo(textboxPositionTo.Text)
            If dt.Rows.Count <> 0 
                BindGridView(dt) 		
                textboxPositionTo.Text = String.Empty 
            EndIf 
        EndIf 
    EndSr

    BegSr gridviewCust_RowCommand Access(*Private) Event(*This.gridviewCust.RowCommand)
        DclSrParm sender Type(*Object)
        DclSrParm e Type(System.Web.UI.WebControls.GridViewCommandEventArgs)

        DclFld CommandName    Type(*String)
        DclFld SelectedIndex  Type(*Integer4) 
        DclFld CustomerNumber Type(*Integer4)

        CommandName = e.CommandName
        SelectedIndex = e.CommandArgument.ToString() 
        CustomerNumber = gridviewCust.DataKeys[SelectedIndex]["customer_cmcustno"].ToString()		

        If CommandName = 'ActionEdit'
            Session['customer-number'] = CustomerNumber
            Response.Redirect('customer-form.aspx')
        ElseIf CommandName = 'ActionDelete'
            // Do something here for delete action.
        EndIf 
    EndSr

    BegFunc PositionListTo Type(DataTable) 
        DclSrParm CustomerName Type(*String) 

        LeaveSr PositionListTo(CustomerName, 0) 
    EndFunc             

    BegFunc  PositionListTo Type(DataTable) 
        DclSrParm CustomerName Type(*String) 
        DclSrParm CustomerNumber Type(*Integer4) 

        DclFld dt Type(DataTable) 

        dt = CustNamelist.PositionPageTo(CustomerName.Trim(), CustomerNumber)
        If dt.Rows.Count = 0 
            LeaveSr *Nothing 
        EndIf 

        LeaveSr dt
    EndFunc 

    BegFunc GetCustomerNumberFromListViewRow Type(*Integer4) 
        DclSrParm dataItem Type(ListViewDataItem) 

        DclFld CustomerNumber Type(*Integer4) 

        ForEach ctrl Type(HiddenField) Collection(dataItem.Controls) 
            // Look for a HiddenField with 'cmcustno' in its name. 
            // If found, its value is the current row's customer number.
            If ctrl.ID.Contains('cmcustno') 
                CustomerNumber = ctrl.Value.ToString()
                LeaveSr CustomerNumber 
            EndIf 
        EndFor 

        Throw *New ArgumentException('Customer number not found in ListView row')
        LeaveSr -1
    EndFunc 


    BegSr listviewCustomersRowAction Access(*Protected) 
        DclSrParm sender Type(*Object)
        DclSrParm e Type(ListViewCommandEventArgs)

		DclFld CommandName Type(*String) 		
        DclFld RowNumber Type(*Integer4)

		CommandName = e.CommandName
		RowNumber = Convert.ToInt32(e.CommandArgument)

        DclFld CustomerNumber Type(*Integer4) 
        CustomerNumber = GetCustomerNumberFromListViewRow(e.Item *As ListViewDataItem) 

        If CommandName = 'edit'
            Session['customer-number'] = CustomerNumber
            Response.Redirect('customer-form.aspx')
        EndIf 
	EndSr 
        

EndClass
